{"ast":null,"code":"import { Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/router\";\nimport * as i2 from \"../../../core/data.service\";\nimport * as i3 from \"@angular/forms\";\nexport class UpdateProductComponent {\n  constructor(route, dataService, fb, router) {\n    this.route = route;\n    this.dataService = dataService;\n    this.fb = fb;\n    this.router = router;\n    this.productId = null;\n    this.updateProductForm = this.fb.group({\n      name: ['', [Validators.required, Validators.minLength(3)]],\n      description: ['', Validators.required],\n      manufacturer: ['', Validators.required],\n      price: [0, [Validators.required, Validators.min(0)]],\n      quantity: [1, [Validators.required, Validators.min(1)]]\n    });\n  }\n  ngOnInit() {\n    // Get product ID from route params\n    this.productId = Number(this.route.snapshot.paramMap.get('id'));\n    if (this.productId) {\n      // Load product data from service\n      console.log(this.productId, typeof this.productId);\n      this.dataService.getProductById(this.productId).subscribe(product => {\n        if (product) {\n          // Populate the form with product data\n          this.updateProductForm.patchValue(product);\n        } else {\n          alert('Product not found.');\n          this.router.navigate(['/inventory']);\n        }\n      }, error => {\n        console.error('Error loading product:', error);\n        alert('An error occurred while loading the product.');\n        this.router.navigate(['/inventory']);\n      });\n    }\n  }\n  onUpdate() {\n    if (this.updateProductForm.valid && this.productId !== null) {\n      // Update product data\n      const updatedProduct = {\n        id: this.productId,\n        ...this.updateProductForm.value\n      };\n      this.dataService.updateProduct(updatedProduct).subscribe(() => {\n        alert('Product updated successfully!');\n        this.router.navigate(['/inventory']);\n      }, error => {\n        console.error('Error updating product:', error);\n        alert('An error occurred while updating the product.');\n      });\n    } else {\n      alert('Please correct the errors in the form.');\n    }\n  }\n}\nUpdateProductComponent.ɵfac = function UpdateProductComponent_Factory(t) {\n  return new (t || UpdateProductComponent)(i0.ɵɵdirectiveInject(i1.ActivatedRoute), i0.ɵɵdirectiveInject(i2.DataService), i0.ɵɵdirectiveInject(i3.FormBuilder), i0.ɵɵdirectiveInject(i1.Router));\n};\nUpdateProductComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdateProductComponent,\n  selectors: [[\"app-update-product\"]],\n  decls: 1,\n  vars: 0,\n  template: function UpdateProductComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵtext(0, \"Pipe what is its importance why we need it how to implement have u implement in your project.if yes show where\\u00A0you\\u00A0implemented\");\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["Validators","UpdateProductComponent","constructor","route","dataService","fb","router","updateProductForm","group","name","required","minLength","description","manufacturer","price","min","quantity","ngOnInit","productId","Number","snapshot","paramMap","get","console","log","getProductById","subscribe","product","patchValue","alert","navigate","error","onUpdate","valid","updatedProduct","id","value","updateProduct","selectors","decls","vars","template","i0"],"sourceRoot":"","sources":["C:\\Users\\DURGA PRASAD\\Downloads\\Angular-Product-Inventory-Management\\Angular-Product-Inventory-Management-Solution-main\\src\\app\\features\\inventory\\update-product\\update-product.component.ts","C:\\Users\\DURGA PRASAD\\Downloads\\Angular-Product-Inventory-Management\\Angular-Product-Inventory-Management-Solution-main\\src\\app\\features\\inventory\\update-product\\update-product.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { DataService } from '../../../core/data.service';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-update-product',\n  templateUrl: './update-product.component.html',\n  styleUrls: ['./update-product.component.css']\n})\nexport class UpdateProductComponent implements OnInit {\n  updateProductForm: FormGroup;\n  productId: number | null = null;\n\n  constructor(\n    private route: ActivatedRoute,\n    private dataService: DataService,\n    private fb: FormBuilder,\n    private router: Router\n  ) {\n    this.updateProductForm = this.fb.group({\n      name: ['', [Validators.required, Validators.minLength(3)]],\n      description: ['', Validators.required],\n      manufacturer: ['', Validators.required],\n      price: [0, [Validators.required, Validators.min(0)]],\n      quantity: [1, [Validators.required, Validators.min(1)]]\n    });\n  }\n\n  ngOnInit(): void {\n    // Get product ID from route params\n    this.productId = Number(this.route.snapshot.paramMap.get('id'));\n\n    if (this.productId) {\n      // Load product data from service\n      console.log(this.productId, typeof this.productId);\n      \n      this.dataService.getProductById(this.productId).subscribe(\n        (product) => {\n          if (product) {\n            // Populate the form with product data\n            this.updateProductForm.patchValue(product);\n          } else {\n            alert('Product not found.');\n            this.router.navigate(['/inventory']);\n          }\n        },\n        (error) => {\n          console.error('Error loading product:', error);\n          alert('An error occurred while loading the product.');\n          this.router.navigate(['/inventory']);\n        }\n      );\n    }\n  }\n\n  onUpdate(): void {\n    if (this.updateProductForm.valid && this.productId !== null) {\n      // Update product data\n      const updatedProduct = { id: this.productId, ...this.updateProductForm.value };\n      this.dataService.updateProduct(updatedProduct).subscribe(\n        () => {\n          alert('Product updated successfully!');\n          this.router.navigate(['/inventory']);\n        },\n        (error) => {\n          console.error('Error updating product:', error);\n          alert('An error occurred while updating the product.');\n        }\n      );\n    } else {\n      alert('Please correct the errors in the form.');\n    }\n  }\n}\n","Pipe what is its importance why we need it how to implement have u implement in your project.if yes show where you implemented"]},"metadata":{},"sourceType":"module","externalDependencies":[]}